import example_instances.toImport;

modeltype qvtpivot "strict" uses qvtoperational('http://www.eclipse.org/qvt/pivot/1.0/QVTOperational');
modeltype qvt "strict" uses qvtoperational('http://www.eclipse.org/QVT/1.0.0/Operational');
modeltype eco "strict" uses ecore ('http://www.eclipse.org/emf/2002/Ecore');
modeltype pivot "strict" uses pivot('http://www.eclipse.org/ocl/3.1.0/Pivot');
//modeltype pivot "strict" uses QVToPivot('QVToPivot');

transformation Trad2PivotTest(in o: qvt, out p: qvtpivot);


main() {
	o.rootObjects()[qvt::expressions::OperationalTransformation] .xmap opTrans2opTransTest();
}



mapping qvt::expressions::OperationalTransformation::opTrans2opTransTest() : qvtpivot::OperationalTransformation 
{
	result.name:= "test";
	result.package := self.ePackage.oclAsType(eco::EPackage) .xmap toPackageTest();
}


mapping eco::EPackage::toPackageTest() : pivot::Package disjuncts
	// Indirect + Leaf
	qvt::expressions::OperationalTransformation::opTrans2opTransTest,
														
	// Direct + Non Leaf
	qvt::expressions::Module::module2moduleTest
{										
}

mapping qvt::expressions::Module::module2moduleTest() : qvtpivot::Module inherits ecore::EPackage::ePackage2PackageTest
{
	result.isBlackbox := self.isBlackbox;
}


mapping ecore::EPackage::ePackage2PackageTest () : pivot::Package
{
	result.nsPrefix := self.nsPrefix;
	result.nsURI := self.nsURI;
	
	result.nestingPackage := self.eSuperPackage .xmap toPackageTest();
	
	result.nestedPackage +=  self.eSubpackages .xmap toPackageTest();

}

mapping qvt::expressions::ImperativeOperation::imOperation2imOperationTest() : qvtpivot::ImperativeOperation
{

	result.context := self.context .xmap varparameter2varparamterTest(this); 

}


mapping qvt::expressions::VarParameter::varparameter2varparamterTest(in io:Trad2PivotTest) : qvtpivot::VarParameter
{
	result.kind:= QueryDirectionKindTest(self.kind);
}

query QueryDirectionKindTest (dk: qvt::expressions::DirectionKind) : qvtpivot::DirectionKind {
	var directionKind : qvtpivot::DirectionKind ;
	switch{
		//TODO:Check that this switch is working. Mainly, check if the scape character '_' is working property
		//in order to access the enum values. The name 'in' connot be used directly since it is detected as a keyword.
		case (dk = qvt::expressions::DirectionKind::_in) directionKind := qvtpivot::DirectionKind::_in;
		case (dk = qvt::expressions::DirectionKind::_out) directionKind := qvtpivot::DirectionKind::_out;
		case (dk = qvt::expressions::DirectionKind::_inout) directionKind := qvtpivot::DirectionKind::_inout;
	};
	return directionKind;
}
